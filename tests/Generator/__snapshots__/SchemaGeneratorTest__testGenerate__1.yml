CategoryCriteria.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CategoryCriteria
    {
    	public const TABLE_NAME = 'category';

    	public function __construct(
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    id: $id,
    		);
    	}


    	public function getName(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->name;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name
    	 */
    	public function withName(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name): static
    	{
    		return new static(
    		    name: $name,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}
    }
CategoryObject.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CategoryObject
    {
    	public const TABLE_NAME = 'category';

    	public function __construct(
    		private string $name,
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string $name,
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    id: $id,
    		);
    	}


    	public function getName(): string
    	{
    		return $this->name;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string $name
    	 */
    	public function withName(string $name): static
    	{
    		return new static(
    		    name: $name,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insert(\Doctrine\DBAL\Connection $connection): int
    	{
    		$row = $this->toArray();
    		$types = $this->doctrineTypes();
    		return $connection->insert(self::TABLE_NAME, $row, $types);
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastIntId(\Doctrine\DBAL\Connection $connection): int
    	{
    		$this->insert(connection: $connection);
    		return (int) $connection->lastInsertId();
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastStringId(\Doctrine\DBAL\Connection $connection): string
    	{
    		$this->insert(connection: $connection);
    		return (string) $connection->lastInsertId();
    	}
    }
CategoryPartial.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CategoryPartial
    {
    	public const TABLE_NAME = 'category';

    	public function __construct(
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    id: $id,
    		);
    	}


    	public function getName(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->name;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name
    	 */
    	public function withName(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name): static
    	{
    		return new static(
    		    name: $name,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function update(\Doctrine\DBAL\Connection $connection, CategoryCriteria $criteria): int
    	{
    		$row = $this->toArray();
    		$types = \array_merge([], $this->doctrineTypes(), $criteria->doctrineTypes());
    		return $connection->update(table: self::TABLE_NAME, data: $row, criteria: $criteria->toArray(), types: $types);
    	}
    }
CommentCriteria.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CommentCriteria
    {
    	public const TABLE_NAME = 'comment';

    	public function __construct(
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    post_id: $post_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    id: $id,
    		);
    	}


    	public function getAuthorId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->author_id;
    	}


    	public function getPostId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->post_id;
    	}


    	public function getContent(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_creation;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id
    	 */
    	public function withAuthorId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id
    	 */
    	public function withPostId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content
    	 */
    	public function withContent(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['post_id'] = $this->post_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['post_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}
    }
CommentObject.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CommentObject
    {
    	public const TABLE_NAME = 'comment';

    	public function __construct(
    		private int $author_id,
    		private int $post_id,
    		private string $content,
    		private \DateTimeInterface $date_creation,
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int $author_id,
    		int $post_id,
    		string $content,
    		\DateTimeInterface $date_creation,
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    post_id: $post_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    id: $id,
    		);
    	}


    	public function getAuthorId(): int
    	{
    		return $this->author_id;
    	}


    	public function getPostId(): int
    	{
    		return $this->post_id;
    	}


    	public function getContent(): string
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface
    	{
    		return $this->date_creation;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param int $author_id
    	 */
    	public function withAuthorId(int $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int $post_id
    	 */
    	public function withPostId(int $post_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string $content
    	 */
    	public function withContent(string $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['post_id'] = $this->post_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['post_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insert(\Doctrine\DBAL\Connection $connection): int
    	{
    		$row = $this->toArray();
    		$types = $this->doctrineTypes();
    		return $connection->insert(self::TABLE_NAME, $row, $types);
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastIntId(\Doctrine\DBAL\Connection $connection): int
    	{
    		$this->insert(connection: $connection);
    		return (int) $connection->lastInsertId();
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastStringId(\Doctrine\DBAL\Connection $connection): string
    	{
    		$this->insert(connection: $connection);
    		return (string) $connection->lastInsertId();
    	}
    }
CommentPartial.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class CommentPartial
    {
    	public const TABLE_NAME = 'comment';

    	public function __construct(
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    post_id: $post_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    id: $id,
    		);
    	}


    	public function getAuthorId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->author_id;
    	}


    	public function getPostId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->post_id;
    	}


    	public function getContent(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_creation;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id
    	 */
    	public function withAuthorId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id
    	 */
    	public function withPostId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $post_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content
    	 */
    	public function withContent(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    post_id: $this->post_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['post_id'] = $this->post_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->post_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['post_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function update(\Doctrine\DBAL\Connection $connection, CommentCriteria $criteria): int
    	{
    		$row = $this->toArray();
    		$types = \array_merge([], $this->doctrineTypes(), $criteria->doctrineTypes());
    		return $connection->update(table: self::TABLE_NAME, data: $row, criteria: $criteria->toArray(), types: $types);
    	}
    }
PostCriteria.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class PostCriteria
    {
    	public const TABLE_NAME = 'post';

    	public function __construct(
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1 = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1 = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    category_id: $category_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    h1: $h1,
    		    id: $id,
    		    title: $title,
    		);
    	}


    	public function getAuthorId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->author_id;
    	}


    	public function getCategoryId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->category_id;
    	}


    	public function getContent(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_creation;
    	}


    	public function getH1(): string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->h1;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	public function getTitle(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->title;
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id
    	 */
    	public function withAuthorId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id
    	 */
    	public function withCategoryId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content
    	 */
    	public function withContent(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1
    	 */
    	public function withH1(string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title
    	 */
    	public function withTitle(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $title,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['category_id'] = $this->category_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['h1'] = $this->h1;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['title'] = $this->title;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['category_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['h1'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['title'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		return $types;
    	}
    }
PostObject.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class PostObject
    {
    	public const TABLE_NAME = 'post';

    	public function __construct(
    		private int $author_id,
    		private int $category_id,
    		private string $content,
    		private \DateTimeInterface $date_creation,
    		private string|null $h1,
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int $author_id,
    		int $category_id,
    		string $content,
    		\DateTimeInterface $date_creation,
    		string|null $h1,
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    category_id: $category_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    h1: $h1,
    		    id: $id,
    		    title: $title,
    		);
    	}


    	public function getAuthorId(): int
    	{
    		return $this->author_id;
    	}


    	public function getCategoryId(): int
    	{
    		return $this->category_id;
    	}


    	public function getContent(): string
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface
    	{
    		return $this->date_creation;
    	}


    	public function getH1(): string|null
    	{
    		return $this->h1;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	public function getTitle(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->title;
    	}


    	/**
    	 * @param int $author_id
    	 */
    	public function withAuthorId(int $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int $category_id
    	 */
    	public function withCategoryId(int $category_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string $content
    	 */
    	public function withContent(string $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|null $h1
    	 */
    	public function withH1(string|null $h1): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title
    	 */
    	public function withTitle(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $title,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['category_id'] = $this->category_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['h1'] = $this->h1;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['title'] = $this->title;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['category_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['h1'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['title'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insert(\Doctrine\DBAL\Connection $connection): int
    	{
    		$row = $this->toArray();
    		$types = $this->doctrineTypes();
    		return $connection->insert(self::TABLE_NAME, $row, $types);
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastIntId(\Doctrine\DBAL\Connection $connection): int
    	{
    		$this->insert(connection: $connection);
    		return (int) $connection->lastInsertId();
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastStringId(\Doctrine\DBAL\Connection $connection): string
    	{
    		$this->insert(connection: $connection);
    		return (string) $connection->lastInsertId();
    	}
    }
PostPartial.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class PostPartial
    {
    	public const TABLE_NAME = 'post';

    	public function __construct(
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1 = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1 = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    author_id: $author_id,
    		    category_id: $category_id,
    		    content: $content,
    		    date_creation: $date_creation,
    		    h1: $h1,
    		    id: $id,
    		    title: $title,
    		);
    	}


    	public function getAuthorId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->author_id;
    	}


    	public function getCategoryId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->category_id;
    	}


    	public function getContent(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->content;
    	}


    	public function getDateCreation(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_creation;
    	}


    	public function getH1(): string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->h1;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	public function getTitle(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->title;
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id
    	 */
    	public function withAuthorId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $author_id): static
    	{
    		return new static(
    		    author_id: $author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id
    	 */
    	public function withCategoryId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $category_id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content
    	 */
    	public function withContent(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $content): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation
    	 */
    	public function withDateCreation(\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_creation): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1
    	 */
    	public function withH1(string|null|\JmvDevelop\Sqlx\Runtime\DefaultValue $h1): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $id,
    		    title: $this->title,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title
    	 */
    	public function withTitle(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $title): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $title,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    author_id: $this->author_id,
    		    category_id: $this->category_id,
    		    content: $this->content,
    		    date_creation: $this->date_creation,
    		    h1: $this->h1,
    		    id: $this->id,
    		    title: $this->title,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['author_id'] = $this->author_id;
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['category_id'] = $this->category_id;
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['content'] = $this->content;
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_creation'] = $this->date_creation;
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['h1'] = $this->h1;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['title'] = $this->title;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->author_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['author_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->category_id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['category_id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->content instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['content'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\TextType::class, [
    		]);
    		}
    		if (false === ($this->date_creation instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_creation'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->h1 instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['h1'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		if (false === ($this->title instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['title'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function update(\Doctrine\DBAL\Connection $connection, PostCriteria $criteria): int
    	{
    		$row = $this->toArray();
    		$types = \array_merge([], $this->doctrineTypes(), $criteria->doctrineTypes());
    		return $connection->update(table: self::TABLE_NAME, data: $row, criteria: $criteria->toArray(), types: $types);
    	}
    }
UserCriteria.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class UserCriteria
    {
    	public const TABLE_NAME = 'user';

    	public function __construct(
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    password: $password,
    		    email: $email,
    		    date_inscription: $date_inscription,
    		    id: $id,
    		);
    	}


    	public function getName(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->name;
    	}


    	public function getPassword(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->password;
    	}


    	public function getEmail(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->email;
    	}


    	public function getDateInscription(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_inscription;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name
    	 */
    	public function withName(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name): static
    	{
    		return new static(
    		    name: $name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password
    	 */
    	public function withPassword(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email
    	 */
    	public function withEmail(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription
    	 */
    	public function withDateInscription(
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription,
    	): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['password'] = $this->password;
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['email'] = $this->email;
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_inscription'] = $this->date_inscription;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['password'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['email'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_inscription'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}
    }
UserObject.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class UserObject
    {
    	public const TABLE_NAME = 'user';

    	public function __construct(
    		private string $name,
    		private string $password,
    		private string $email,
    		private \DateTimeInterface $date_inscription,
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string $name,
    		string $password,
    		string $email,
    		\DateTimeInterface $date_inscription,
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    password: $password,
    		    email: $email,
    		    date_inscription: $date_inscription,
    		    id: $id,
    		);
    	}


    	public function getName(): string
    	{
    		return $this->name;
    	}


    	public function getPassword(): string
    	{
    		return $this->password;
    	}


    	public function getEmail(): string
    	{
    		return $this->email;
    	}


    	public function getDateInscription(): \DateTimeInterface
    	{
    		return $this->date_inscription;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string $name
    	 */
    	public function withName(string $name): static
    	{
    		return new static(
    		    name: $name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string $password
    	 */
    	public function withPassword(string $password): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string $email
    	 */
    	public function withEmail(string $email): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface $date_inscription
    	 */
    	public function withDateInscription(\DateTimeInterface $date_inscription): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['password'] = $this->password;
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['email'] = $this->email;
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_inscription'] = $this->date_inscription;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['password'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['email'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_inscription'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insert(\Doctrine\DBAL\Connection $connection): int
    	{
    		$row = $this->toArray();
    		$types = $this->doctrineTypes();
    		return $connection->insert(self::TABLE_NAME, $row, $types);
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastIntId(\Doctrine\DBAL\Connection $connection): int
    	{
    		$this->insert(connection: $connection);
    		return (int) $connection->lastInsertId();
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function insertAndLastStringId(\Doctrine\DBAL\Connection $connection): string
    	{
    		$this->insert(connection: $connection);
    		return (string) $connection->lastInsertId();
    	}
    }
UserPartial.php: |
    <?php

    declare(strict_types=1);

    namespace JmvDevelop\Sqlx\Tests\Schema;

    final class UserPartial
    {
    	public const TABLE_NAME = 'user';

    	public function __construct(
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		private int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	) {
    	}


    	public static function create(
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    		int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id = new \JmvDevelop\Sqlx\Runtime\DefaultValue(),
    	): self
    	{
    		return new self(
    		    name: $name,
    		    password: $password,
    		    email: $email,
    		    date_inscription: $date_inscription,
    		    id: $id,
    		);
    	}


    	public function getName(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->name;
    	}


    	public function getPassword(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->password;
    	}


    	public function getEmail(): string|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->email;
    	}


    	public function getDateInscription(): \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->date_inscription;
    	}


    	public function getId(): int|\JmvDevelop\Sqlx\Runtime\DefaultValue
    	{
    		return $this->id;
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name
    	 */
    	public function withName(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $name): static
    	{
    		return new static(
    		    name: $name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password
    	 */
    	public function withPassword(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $password): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email
    	 */
    	public function withEmail(string|\JmvDevelop\Sqlx\Runtime\DefaultValue $email): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param \DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription
    	 */
    	public function withDateInscription(
    		\DateTimeInterface|\JmvDevelop\Sqlx\Runtime\DefaultValue $date_inscription,
    	): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $date_inscription,
    		    id: $this->id,
    		);
    	}


    	/**
    	 * @param int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id
    	 */
    	public function withId(int|\JmvDevelop\Sqlx\Runtime\DefaultValue $id): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $id,
    		);
    	}


    	public function clone(): static
    	{
    		return new static(
    		    name: $this->name,
    		    password: $this->password,
    		    email: $this->email,
    		    date_inscription: $this->date_inscription,
    		    id: $this->id,
    		);
    	}


    	public function toArray(): array
    	{
    		$return = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['name'] = $this->name;
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['password'] = $this->password;
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['email'] = $this->email;
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['date_inscription'] = $this->date_inscription;
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $return['id'] = $this->id;
    		}
    		return $return;
    	}


    	/**
    	 * @return array<string, \Doctrine\DBAL\Types\Type>
    	 */
    	public function doctrineTypes(): array
    	{
    		$types = [];
    		if (false === ($this->name instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['name'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->password instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['password'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->email instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['email'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\StringType::class, [
    		]);
    		}
    		if (false === ($this->date_inscription instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['date_inscription'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\DateType::class, [
    		]);
    		}
    		if (false === ($this->id instanceof \JmvDevelop\Sqlx\Runtime\DefaultValue)) {
    		    $types['id'] = \Nette\PhpGenerator\Dumper::createObject(\Doctrine\DBAL\Types\IntegerType::class, [
    		]);
    		}
    		return $types;
    	}


    	/**
    	 * @throws \Doctrine\DBAL\Exception
    	 */
    	public function update(\Doctrine\DBAL\Connection $connection, UserCriteria $criteria): int
    	{
    		$row = $this->toArray();
    		$types = \array_merge([], $this->doctrineTypes(), $criteria->doctrineTypes());
    		return $connection->update(table: self::TABLE_NAME, data: $row, criteria: $criteria->toArray(), types: $types);
    	}
    }
